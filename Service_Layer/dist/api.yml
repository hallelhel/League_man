---
openapi: 3.0.0
info:
  title: Simple Inventory API
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: Users
    description: Operations available to users
  - name: Auth
    description: authenticaton
  - name: Games
paths:
  /login:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      description: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid username/password supplied
        "401":
          description: user already loged-in
  /register:
    post:
      tags:
        - Auth
      summary: Add new user
      requestBody:
        description: New user insert
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "200":
          description: A new user has been added to the server
        "400":
          description: The request for add new user has been denied
        "409":
          description: user-name taken
  /user/logOut:
    post:
      tags:
        - Users
        - Auth
      summary: Logs user out of the system
      description: Logs user out of the system
      operationId: logOutUser
      responses:
        "200":
          description: successful Loged out
        "400":
          description: The user must be loged in before log out
  
  /users/allUsersDetails:
    get:
      tags:
        - Users
      summary: Return list of all the users
      responses:
        "200":
          description: The users list returned to user
          content:
            application/jason:
              schema:
                type: string
        "400":
          description: The request for getting the user list has been denied
  /users/userDetails:
    get:
      tags:
        - Users
      summary: Get data of a spacific user
      description: get from the client a username and returns his data
      responses:
        "200":
          description: Data of the spacific user
          content:
            application/jason:
              schema:
                type: string
        "400":
          description: User not found

  /games/GameDocumentation/{gameID}:
    get:
      tags:
        - Games
      summary: Return the decumentation of the game
      parameters:
        - name: gameID
          in: path
          description: game id to return details about
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Game documentation has been returned to client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/gameDocumentation"
        "400":
          description: The request to get the game documantation has been denied
  /games/LeagueManagment/addGame:
    post:
      tags:
        - Games
      summary: Add game to the league managment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: 2021-5-31
                  # format: date
                hour:
                  type: string
                  example: "20:30:00"
                  # format: time
                away_team_id:
                  type: number
                  example: 939
                home_team_id:
                  type: number
                  example: 1020
                field:
                  type: string
                  example: Tedi
                referee_name:
                  type: string
                  example: Yossi Cohen
      responses:
        "200":
          description: The game added to the league

        "400":
          description: The requset to add game to league has been denied


#old api
  # /users/FavoriteTeams:
  #   get:
  #     tags:
  #       - Teams
  #       - Users
  #     summary: Return favorites teams data for the user
  #     responses:
  #       "200":
  #         description: The favorites teams data returned to user, [] if no teams are assignd
  #         content:
  #           application/jason:
  #             schema:
  #               $ref: "#/components/schemas/UserFavoritesTeams"
  #       "400":
  #         description: The request for getting favorite teams data has been denied
  #   post:
  #     tags:
  #       - Users
  #       - Teams
  #     summary: Add team to faivorite list of user
  #     requestBody:
  #       description: The team id to be added
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               team_id:
  #                 type: string
  #                 description: teams's id which the user saved
  #                 example: 85
  #     responses:
  #       "200":
  #         description: The team has been added to favorite list
  #       "400":
  #         description: The request for add new team to fav. list has been denied
  # /users/FavoritePlayers:
  #   get:
  #     tags:
  #       - Users
  #       - Players
  #     summary: Return favorites data for the user
  #     responses:
  #       "200":
  #         description: The favorites players data returned to user, [] if no players are assignd
  #         content:
  #           application/jason:
  #             schema:
  #               $ref: "#/components/schemas/UserFavoritePlayers"
  #       "400":
  #         description: The request for getting the main page legue data has been denied
  #   post:
  #     tags:
  #       - Users
  #       - Players
  #     summary: Add player to faivorite list of user
  #     requestBody:
  #       description: The player id to be added
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               playerId:
  #                 type: string
  #                 description: player's id which the user saved
  #                 example: 84658
  #     responses:
  #       "200":
  #         description: The player has been added to favorite list
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #       "400":
  #         description: The request for add new player to fav. list has been denied
  # /users/FavoriteGames:
  #   get:
  #     tags:
  #       - Users
  #       - Games
  #     summary: Return favorites data for the user
  #     responses:
  #       "200":
  #         description: The main page favorites data returned to user, [] if no games are assignd
  #         content:
  #           application/jason:
  #             schema:
  #               $ref: "#/components/schemas/UserFavoritesGames"
  #       "400":
  #         description: The request for getting the main page legue data has been denied
  #   post:
  #     tags:
  #       - Users
  #       - Games
  #     summary: Add game to faivorite list of user
  #     requestBody:
  #       description: The game id to be added
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               game_id:
  #                 type: string
  #                 description: game's id which the user saved
  #                 example: 939
  #     responses:
  #       "200":
  #         description: The game has been added to favorite list
  #       "400":
  #         description: The request for add new Game to fav. list has been denied
  # /teams/teamFullDetails/{teamID}:
  #   get:
  #     tags:
  #       - Teams
  #     summary: Return by team ID the team details
  #     parameters:
  #       - name: teamID
  #         in: path
  #         description: The ID of the team
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #           example: 939
  #     responses:
  #       "200":
  #         description: Data of the spacific Team
  #         content:
  #           application/jason:
  #             schema:
  #               $ref: "#/components/schemas/teamData"
  #       "400":
  #         description: Team not found/ Request failed
  # /teams/search/{searchKey}:
  #   get:
  #     tags:
  #       - Teams
  #     summary: search team by team name
  #     parameters:
  #       - name: searchKey
  #         in: path
  #         description: The keyWord to search team by (name)
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #         example: AaB
  #     responses:
  #       "200":
  #         description: Search Results
  #         content:
  #           application/jason:
  #             schema:
  #               $ref: "#/components/schemas/TeamSearchResults"
  #       "400":
  #         description: Term not found

  # /players/playerDetails/{playerID}:
  #   get:
  #     tags:
  #       - Players
  #     summary: Return the card of the player
  #     parameters:
  #       - name: playerID
  #         in: path
  #         description: The id of the player
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #         example: 84658
  #     responses:
  #       "200":
  #         description: player card has been returned
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/previewViewPlayer"
  #       "400":
  #         description: The request for getting player card has been denied

  # /players/search/locationAndTeam/{searchKey}/{team}/{location}:
  #   get:
  #     tags:
  #       - Players
  #     summary: return player details by player name, location on filed, and team name
  #     parameters:
  #       - name: searchKey
  #         in: path
  #         description: The keyWord to search player by (name)
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #         example: Peter Ankersen
  #       - name: team
  #         in: path
  #         description: The team of the player
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #         example: København
  #       - name: location
  #         in: path
  #         description: The location of the player on the filed
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #         example: Defender
  #     responses:
  #       "200":
  #         description: Search Results
  #         content:
  #           application/jason:
  #             schema:
  #               $ref: "#/components/schemas/PlayerSearchResults"
  #       "201":
  #         description: no results found
  #       "400":
  #         description: Player search error
  # /league/LeagueData:
  #   get:
  #     tags:
  #       - League
  #     summary: Return main page league data
  #     responses:
  #       "200":
  #         description: The main page legue data returned to user
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/LeagueData"
  #       "400":
  #         description: The request for getting the main page legue data has been denied
  # /league/currentStageDetails:
  #   get:
  #     tags:
  #       - League
  #     summary: Return details about games in current stage
  #     responses:
  #       "200":
  #         description: Current games details returned succesfully
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/currentStageDetails"
  #       "400":
  #         description: The request for getting current stage games has been denied
  # /league/getSeachOutoCompleteData:
  #   get:
  #     tags:
  #       - League
  #     summary: return all palyers names,teams names, players Positions in league 271
  #     responses:
  #       "200":
  #         description: return array with all the palyers names,teams names, players Positions
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/seachAoutoComplete"
  #       "400":
  #         description: The request to get palyers names,teams names, players Positions has been denied
  # /league/leagueGames:
  #   get:
  #     tags:
  #       - League
  #     summary: Return array with all the league games
  #     responses:
  #       "200":
  #         description: return array with all the games in the league
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/leagueGames"
  #       "400":
  #         description: The request to get league Games has been denied

  # /coaches/coachDetails/{coachID}:
  #   get:
  #     tags:
  #       - Coaches
  #     summary: Return the card of the coach
  #     parameters:
  #       - name: coachID
  #         in: path
  #         description: The name of the coach
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #           example: 1467946
  #     responses:
  #       "200":
  #         description: coach card has been returned
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/previewViewCoach"
  #       "400":
  #         description: The request for getting the coach card has been denied
  # /games/LeagueManagment/addScore:
  #   post:
  #     tags:
  #       - Games
  #     summary: Add score to game
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               game_id:
  #                 type: number
  #                 example: 2
  #               home_team_goal:
  #                 type: number
  #                 example: 2
  #               away_team_goal:
  #                 type: number
  #                 example: 1
  #     responses:
  #       "200":
  #         description: The game has been update with the score

  #       "400":
  #         description: The requset to add score to game has been denied
  # /games/LeagueManagment/addEvent:
  #   post:
  #     tags:
  #       - Games
  #     summary: Add event schedule to game
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               game_id:
  #                 type: number
  #                 example: 1
  #               date:
  #                 type: string
  #                 example: 2020-2-18
  #               hour:
  #                 type: string
  #                 example: "21:45:00"
  #               game_minute:
  #                 type: number
  #                 example: 37
  #               event_type:
  #                 type: string
  #                 example: red card
  #               player_id:
  #                 type: number
  #                 example: 82808

  #     responses:
  #       "200":
  #         description: Event has been added to the game

  #       "400":
  #         description: The requset to add event  to game has been denied


components:
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
          example: noam
        password:
          type: string
          example: "12345$a"
    UserRegister:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          example: noam
        firstname:
          type: string
          example: aviran
        lastname:
          type: string
          example: giat
        country:
          type: string
          example: israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          example: 12345$a
        email:
          type: string
          example: kotlar@post.bgu.ac.il
        picture:
          type: string
          example: path
        Role:
          type: string
          example: referee
    LeagueData:
      type: object
      properties:
        leagueName:
          type: string
          example: Astars
        seasonName:
          type: string
          example: summer
        stageName:
          type: string
          example: A
        ameDetails:
          type: object
    UserFavoritesGames:
      type: object
      properties:
        Games:
          type: array
          items:
            type: object
    UserFavoritePlayers:
      type: object
      properties:
        Players:
          type: array
          items:
            type: object
    UserFavoritesTeams:
      type: object
      properties:
        Teams:
          type: array
          items:
            type: object
    gameData:
      type: object
      properties:
        home_team:
          type: string
          example: barcellona
        away_team:
          type: string
          example: real madrid
        game_date:
          type: string
          example: 2021-3-7
        field:
          type: string
          example: Tedi
    previewViewCoach:
      type: object
      properties:
        fullname:
          type: string
        currentTeamName:
          type: string
        image_url:
          type: string
        commonName:
          type: string
        nation:
          type: string
        birthDay:
          type: string
        countryOB:
          type: string
    previewViewPlayer:
      type: object
      properties:
        fullname:
          type: string
          example: yosi cohen
        image_url:
          type: string
        commonName:
          type: string
          example: yoss
        position_id:
          type: number
          example: 4
        nationality:
          type: string
          example: israeli
        height:
          type: string
          example: 1.78
        birthcountry:
          type: string
          example: israel
        birthdate:
          type: string
          example: 1-2-1993
        team_name:
          type: string
          example: Celtic
        weight:
          type: string
          example: 80
    teamData:
      type: object
      properties:
        team_players:
          type: array
          items:
            type: object
        team_coach:
          type: array
          items:
            type: object
        team_games:
          type: array
          items:
            type: object
    TeamSearchResults:
      type: object
      properties:
        teamName:
          type: string
          example: AaB
        teamLogo:
          type: string
          example: https://cdn.sportmonks.com/images//soccer/teams/28/1020.png
        leagueID:
          type: string
          example: 271
        TeamID:
          type: string
          example: 1020
    PlayerSearchResults:
      type: object
      properties:
        PlayerID:
          type: string
          example: 52371
        common_name:
          type: string
          example: P. Ankersen
        nationality:
          type: string
          example: Denmark
        birthdate:
          type: string
          example: 22/09/1990
        birthplace:
          type: string
          example: Esbjerg
        height:
          type: string
          example: 180 cm
        weight:
          type: string
          example: 73 kg
        playerPosition:
          type: string
          example: Defender
        team:
          type: string
          example: København
        leagueID:
          type: string
          example: 271

    gameDocumentation:
      type: object
      properties:
        date:
          type: string
          example: "Tue Jul 21 2020"
        time:
          type: string
          example: 20:30:00
        home_team:
          type: string
          example: Real Madrid
        away_team:
          type: string
          example: Barcellona
        field:
          type: string
          example: Tedi
        home_team_goal:
          type: number
          description: If null- means the game not occur yet
          example: 2
        away_team_goal:
          type: number
          description: If null- means the game not occur yet
          example: 1
        eventSchedule:
          type: object
          description: If null- means the game not occur yet. cointains the events in the game

    seachAoutoComplete:
      type: object
      properties:
        teamsNames:
          type: array
          items:
            type: string
        playersNames:
          type: array
          items:
            type: string
        positions:
          type: array
          items:
            type: string

    leagueGames:
      type: object
      properties:
        Games:
          type: array
          items:
            type: object

    currentStageDetails:
      type: object
      properties:
        pastGamesList:
          type: object
          items:
            type: object
        futureGamesList:
          type: object
          items:
            type: object

#old
  # /players/search/name/{searchKey}:
  #   get:
  #     tags:
  #       - Players
  #     summary: return player details by player name
  #     parameters:
  #       - name: searchKey
  #         in: path
  #         description: The keyWord to search player by (name)
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #         example: Peter Ankersen
  #     responses:
  #       "200":
  #         description: Search Results, [] if no results found
  #         content:
  #           application/jason:
  #             schema:
  #               $ref: "#/components/schemas/PlayerSearchResults"
  #       "400":
  #         description: Player search error
  # /players/search/locationPlayer/{searchKey}/{location}:
  #   get:
  #     tags:
  #       - Players
  #     summary: return player details by player name and location on filed
  #     parameters:
  #       - name: searchKey
  #         in: path
  #         description: The keyWord to search player by (name)
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #         example: Peter Ankersen
  #       - name: location
  #         in: path
  #         description: The location of the player on the filed
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #         example: Defender
  #     responses:
  #       "200":
  #         description: Search Results, [] if no results found
  #         content:
  #           application/jason:
  #             schema:
  #               $ref: "#/components/schemas/PlayerSearchResults"
  #       "400":
  #         description: Player search error
  # /players/search/PlayerInTeam/{searchKey}/{team}:
  #   get:
  #     tags:
  #       - Players
  #     summary: return player details by player name and team name
  #     parameters:
  #       - name: searchKey
  #         in: path
  #         description: The keyWord to search player by (name)
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #         example: Peter Ankersen
  #       - name: team
  #         in: path
  #         description: The team of the player
  #         style: simple
  #         explode: false
  #         schema:
  #           type: string
  #         example: København
  #     responses:
  #       "200":
  #         description: Search Results, [] if no results found
  #         content:
  #           application/jason:
  #             schema:
  #               $ref: "#/components/schemas/PlayerSearchResults"
  #       "400":
  #         description: Player search error
